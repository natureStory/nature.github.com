{"version":3,"sources":["component/Forms/mapKeywordToComponent.js","component/Forms/Input/index.jsx","component/Forms/Input/emailInput.jsx","component/Forms/Input/numberInput.jsx","component/Forms/Select/index.jsx","component/Forms/mapApiToKeyword.js","component/Forms/index.jsx","component/Forms/mapApiToText.jsx","examples/a1.js","examples/a2.js","examples/a3.js","examples/a4.js","examples/a5.js","examples/a6.js","examples/a7.js","examples/a8.js","examples/a9.js","examples/b1.js","examples/b2.js","examples/b3.js","examples/b4.js","App.js","serviceWorker.js","index.js"],"names":["data","placeholder","value","disabled","onChange","e","target","Number","style","width","properties","options","values","map","item","Option","key","commonMaps","1","2","3","5","7","15","16","specialMaps","console","error","log","Array","from","Set","Object","reduce","total","forEach","mapKeywordToComponent","defaultFormItemLayout","labelCol","xs","span","wrapperCol","getBaseFieldName","bindFieldNames","split","fieldName","bizFieldName","id","renderFormItem","editStatus","baseFieldName","Component","ComponentParams","getFieldDecorator","required","selfRulesConfig","rules","message","filter","rule","type","unit","props","length","str","moment","format","name","join","country_code","index","className","href","url","id_type_display","id_no","color","fontSize","lineHeight","description","JSON","stringify","mapApiToText","MapApiToForms","form","getForm","fieldsData","columns","formItemStyle","formItemLayout","extra","listenersConfig","disabledFormItems","hiddenFormItems","getFieldsValue","useState","newDisabledFormItems","setNewDisabledFormItems","newHiddenFormItems","setNewHiddenFormItems","change","fieldsDataItem","listenerList","handleEvent","handleParams","has","fieldsValues","result","handleCallback","param","handleType","restProps","isRequired","obLaunchRequired","tips","hide","isReadonly","undefined","isCanModify","componentName","mapApiToKeyword","relationListeners","Item","label","flex","minWidth","maxWidth","Form","create","formRef","setValues","setEditStatus","realname","fetch","then","indexOf","max","begin_work_time","gender","onClick","resetFields","setFieldsValue","birthday","validateFields","errors","alert","setColumns","backgroundColor","padding","office_email","App","defaultActiveKey","Panel","header","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65fffcd3.chunk.js","sourcesContent":["import Input from './Input';\nimport EmailInput from './Input/emailInput';\nimport NumberInput from './Input/numberInput';\nimport Select from './Select';\n\nexport default {\n    'Input': Input,\n    'E-mailInput': EmailInput,\n    'NumberInput': NumberInput,\n    'Select': Select\n};","import React from \"react\";\n\nimport { Input } from 'antd';\n\nexport default function ({data, placeholder, value, disabled, onChange}) {\n    const change = (e) => {\n        onChange(e.target.value, data);\n    };\n    return (\n        <Input placeholder={placeholder} disabled={disabled} value={value} onChange={change} />\n    );\n}","import React from \"react\";\n\nimport { Input } from 'antd';\n\nexport default function ({data, placeholder, value, disabled, onChange}) {\n    const change = (e) => {\n        onChange(e.target.value, data);\n    };\n    return (\n        <Input placeholder={placeholder} disabled={disabled} value={value} onChange={change} />\n    );\n}","import React from \"react\";\n\nimport { Input } from 'antd';\n\nexport default function ({data, placeholder, value, disabled, onChange}) {\n    const change = (e) => {\n        onChange(Number(e.target.value) || e.target.value, data);\n    };\n    return (\n        <Input placeholder={placeholder} disabled={disabled} value={value} onChange={change} />\n    );\n}","import React from \"react\";\n\nimport { Select } from 'antd';\n\nexport default function ({data, placeholder, value, disabled, onChange}) {\n    const change = (value) => {\n        onChange(value, data);\n    };\n    return (\n        <Select\n            placeholder={placeholder}\n            disabled={disabled}\n            style={{width: '100%'}}\n            onChange={change}\n            value={value}\n        >\n            {\n                (data?.properties?.options || data?.values).map(item => (\n                    <Select.Option value={item} key={item}>{item}</Select.Option>\n                ))\n            }\n        </Select>\n    );\n}","import mapKeywordToComponent from './mapKeywordToComponent';\n\nconst commonMaps = {\n    1: 'Input',\n    2: 'Input',\n    3: 'Select',\n    5: 'Input',\n    7: 'Input',\n    15: 'Input',\n    16: 'Input',\n};\n\n// 为了解决实际业务中一个 type 对应多个组件的问题\nconst specialMaps = {\n    1: {\n        \"office_email\": 'E-mailInput'\n    },\n    15: {\n        \"telephone\": 'NumberInput',\n        \"address\": 'Address',\n        \"company\": 'Company'\n    }\n};\n\nfunction checkError() {\n    console.error('警告：请保证仅在开发模式下验证！！！');\n    console.log('start————配置正确性检查');\n    Array.from(new Set([...Object.values(commonMaps), ...Object.values(specialMaps).reduce((total, item) => [...total, ...Object.values(item)], [])])).forEach(item => !mapKeywordToComponent[item] && console.error(`${item} 未在 mapKeywordToComponent.js 中配置，请前往配置！`));\n    console.log('end————配置正确性检查');\n\n}\n\n// 配置正确性检查，请保证仅在开发模式下启用！其余环境请禁用\ncheckError();\n\nexport default function mapApiToKeyword(type, fieldName) {\n    try {\n        if (!fieldName) {\n            return commonMaps[type];\n        } else {\n            return (specialMaps[type] || {})[fieldName] || commonMaps[type]\n        }\n    } catch (e) {\n        return '';\n    }\n}","import React, {useState} from 'react';\nimport {Form} from 'antd';\nimport mapApiToKeyword from './mapApiToKeyword';\nimport mapApiToText from './mapApiToText';\nimport mapKeywordToComponent from './mapKeywordToComponent';\n\nimport './index.css';\n\nconst defaultFormItemLayout = {\n    labelCol: {\n        xs: {span: 8},\n    },\n    wrapperCol: {\n        xs: {span: 16},\n    }\n};\n\nconst getBaseFieldName = (item, bindFieldNames) => {\n    if (!bindFieldNames) {\n        return item?.fieldName || item?.properties?.bizFieldName || item?.id;\n    } else {\n        return `${bindFieldNames.split('.').reduce((total, item) => total[item] || {}, item)}`;\n    }\n};\nconst renderFormItem = (item, editStatus, values, baseFieldName, Component, ComponentParams, getFieldDecorator, required, placeholder, selfRulesConfig) => {\n    if (!editStatus) {      // 非编辑状态\n        return (\n            // todo: values 的 取值方式\n            <div>{mapApiToText({type: item.type, unit: '', value: [(values || {})[baseFieldName]], ...item})}</div>\n        );\n    } else {\n        return values ? (\n            <Component value={values[baseFieldName]} {...ComponentParams}/>\n        ) : getFieldDecorator(baseFieldName, {\n            rules: [\n                {required: required, message: placeholder},\n                ...selfRulesConfig.filter(rule => rule.fieldName === baseFieldName)\n            ],\n        })(<Component {...ComponentParams}/>)}\n};\n\nfunction MapApiToForms({\n                           form,\n                           getForm = () => {},\n                           bindFieldNames,\n                           fieldsData = [],\n                           editStatus = true,\n                           columns = 1,\n                           formItemStyle,\n                           formItemLayout,\n                           onChange = () => {},\n                           values,\n                           extra = {},\n                           listenersConfig = [],\n                           selfRulesConfig = [],\n                           disabledFormItems = [],\n                           hiddenFormItems = [],\n                       }) {\n    getForm(form);\n    const {getFieldDecorator, getFieldsValue} = form || {};\n    const [newDisabledFormItems, setNewDisabledFormItems] = useState([]);\n    const [newHiddenFormItems, setNewHiddenFormItems] = useState([]);\n\n    const change = (value, fieldsDataItem, ...restProps) => {\n        const baseFieldName = getBaseFieldName(fieldsDataItem, bindFieldNames);\n\n        // 执行 onChange 事件，以及 listenersConfig 中的 [onchange, disable, hide] 事件\n        const listenerList = listenersConfig.filter(item => (item.handleEvent === 'onchange' && new Set(item.handleParams).has(baseFieldName)));\n        listenerList.forEach(item => {\n            let fieldsValues = values || getFieldsValue();\n            fieldsValues[baseFieldName] = value;\n            const result = item.handleCallback(...item.handleParams.map(param => fieldsValues[param])) || [];\n            if (item?.handleType === \"disable\") {\n                setNewDisabledFormItems([...result]);\n            } else if (item?.handleType === \"hide\") {\n                setNewHiddenFormItems([...result]);\n            }\n        });\n\n        onChange(fieldsDataItem, value, restProps);\n    };\n\n    return fieldsData.map((item, index) => {\n        const baseFieldName = getBaseFieldName(item, bindFieldNames);\n\n        // todo: 需要确定的点，字段不统一\n        const required = item?.required || item?.isRequired || item?.obLaunchRequired;\n        // todo: 需要确定的点，字段不统一\n        const placeholder = item?.placeholder || item?.tips || '请输入';\n        const hide = new Set([...hiddenFormItems, ...newHiddenFormItems]).has(baseFieldName);\n        // todo: 需要确定的点，字段不统一\n        const disabled = item?.isReadonly || (item?.isCanModify !== undefined && !item?.isCanModify) || new Set([...disabledFormItems, ...newDisabledFormItems]).has(baseFieldName);\n        const width = `${100/columns}%`;\n\n        let componentName = mapApiToKeyword(item.type, baseFieldName);     // mapApiToKeyword，映射后端表单类型到表单组件名\n        const Component = mapKeywordToComponent[componentName] || (() => null);     // mapKeywordToComponent，映射表单组件名到组件\n        const ComponentParams = {       // 组件公共参数\n            relationListeners: listenersConfig,   // 事件仍然往下传递，onblur、onClick 等则需要自己在组件里写\n            placeholder: placeholder,\n            onChange: change,\n            data: item,\n            key: index,\n            disabled\n        };\n\n        return (\n            !hide ? (\n                <Form.Item\n                    {...(formItemLayout || defaultFormItemLayout)}\n                    label={item.label}\n                    required={required}\n                    key={baseFieldName}\n                    className=\"form_item\"\n                    style={{flex: 1, width, minWidth: width, maxWidth: width, ...formItemStyle}}\n                >\n                    {renderFormItem(item, editStatus, values, baseFieldName, Component, ComponentParams, getFieldDecorator, required, placeholder, selfRulesConfig)}\n                    {extra[baseFieldName]}\n                </Form.Item>\n            ) : null\n        );\n    });\n}\n\nexport default function (props) {\n    let Component;\n    if (props.values) {\n        // 非受控\n        Component = MapApiToForms;\n    } else {\n        // 受控\n        Component = Form.create()(MapApiToForms);\n    }\n    return (\n        <Form style={props.style} className=\"form_content\">\n            <Component {...props}/>\n        </Form>\n    );\n}\n","import moment from 'moment';\nimport './index.css';\nimport React from 'react';\n\nexport default ({ type, value = [], unit='', ...props }) => {\n  if (!value || value.length === 0) {\n    return '--';\n  }\n  switch (type) {\n    case 1:\n    case 3:\n    case 10:\n    case 11: {\n      let str = value[0] || '--';\n      if(str && (props.fieldName === \"max_salary\" || props.fieldName === \"min_salary\" || props.fieldName === \"head_count\")){\n        str += unit;\n      }\n      return str;\n    }\n    case 2:\n      if (value[0] && value[0] === '-') {\n        return '--';\n      }\n      return value[0] ? moment(value[0]).format('YYYY-MM-DD') : null;\n    case 4:\n    case 5:\n    case 12:\n    case 13:\n    case 14:\n    case 15:\n    case 16:\n    case 17:\n    case 18:\n    case 19:\n    case 20:\n    case 21:\n      return value.filter(e => e && e.name).map(({name}) => name).join('、');\n    case 6:\n      return ` ${value[0].name || ''}${value[1].name || ''}${value[2].name || ''}${value[3] || ''}`;\n    case 7: // 电话\n      return ` ${value[0].country_code} ${value[0].value}`;\n    case 0: // 图片\n    case 8: // 附件\n      return (\n        <>\n          {value.map((item, index) => {\n            return (\n              <p key={index} className=\"fileItem\">\n                {' '}\n                <a className=\"fileLink\" href={item.url}>\n                  {item.name}\n                </a>\n              </p>\n            );\n          })}\n        </>\n      );\n    case 9: //* 证件\n      return ` ${value[0].id_type_display} ${value[0].id_no}`;\n    case 25: {\n      const str = value.filter(e => e && e.name).map(({name}) => name).join('、');\n      return <div>\n        <div>{str}</div>\n        <div style={{color: 'rgb(173, 175, 183)', fontSize: '12px', lineHeight: '20px'}}>{props.description}</div>\n      </div>;\n    }\n\n    default:\n      return (value && JSON.stringify(value[0])) || '--';\n  }\n};\n","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n    const [values, setValues] = useState({});\n    const [editStatus, setEditStatus] = useState(true);\n\n    function onChange(fieldsDataItem, value) {\n        console.log(fieldsDataItem, value);\n        setValues({...values, [fieldsDataItem.properties.bizFieldName]: value});\n        console.log(values);\n    }\n\n    return (\n        <div className=\"App\">\n            <p>模拟场景：</p>\n            <p>1. 填写姓名隐藏性别</p>\n            <p>2. 填写姓名并自动填写公司邮箱</p>\n            <p>3. 填写证件号码禁用生日，自动填写</p>\n            <p>4. 提交显示表单数据</p>\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                // bindFieldNames={'id'}    // 表单绑定的 唯一id/字段名， 例子：bindFieldNames={'properties.bizFieldName'} 就是取每项的 item.properties.bizFieldName\n                columns={2}\n                style={{width: 800}}\n                // formItemStyle={{width: 200}}\n                // formItemLayout={{\n                //     labelCol: {\n                //         xs: {span: 12},\n                //     },\n                //     wrapperCol: {\n                //         xs: {span: 12},\n                //     }\n                // }}\n                fieldsData={data}   // 接口表单数据\n                editStatus={editStatus}   // 默认编辑状态\n                listenersConfig={[  // onchange 事件可自动处理，其余自定义事件将被传至表单组件，请自行处理\n                    {handleEvent: 'onchange', handleParams: ['realname', 'id_no'], handleCallback: (realname, id_no) => {\n                            fetch('http://localhost:3000/').then(data => console.log(data));\n                    }},\n                    {handleEvent: 'onblur', handleParams: ['realname', 'id_no'], handleCallback: () => {\n                            /* 异步等... */\n                    }},\n                    // hide、disable 需要返回字段列表\n                    {handleEvent: 'onchange', handleType: 'hide', handleParams: ['realname', 'id_no'], handleCallback: (realname = '', id_no) => {\n                            /* 需要返回自定义的隐藏列表... */\n                            if (realname.indexOf('1') > -1) {\n                                return ['id_no', 'birthday'];\n                            }\n                    }},\n                    {handleEvent: 'onchange', handleType: 'disable', handleParams: ['realname', 'id_no'], handleCallback: (realname = '', id_no) => {\n                            /* 需要返回自定义的禁用列表... */\n                            if (realname.indexOf('1') > -1) {\n                                return ['office_email'];\n                            }\n                    }},\n                ]}\n                selfRulesConfig={[      // 自定义验证规则\n                    {\n                        fieldName: 'office_email',\n                        type: 'email',\n                        message: '必须是邮箱！',\n                    },\n                    // {\n                    //     fieldName: 'office_email',\n                    //     validator: this.handleEMailValidator,\n                    // },\n                    {\n                        fieldName: 'office_email',\n                        max: 10,\n                        message: '太长啦！',\n                    },\n                    {\n                        fieldName: 'telephone',\n                        type: 'number',\n                        message: '必须是数字！',\n                    },\n                ]}\n                extra={{\n                    realname: <div style={{color: 'purple'}}>你好</div>,\n                    begin_work_time: <div style={{color: 'green'}}>不好</div>,\n                    gender: <div style={{color: 'purple'}}>你很好</div>,\n                    id_no: <div style={{color: 'green'}}>我不好</div>,\n                }}\n                // 作为特殊情况下的备用，请勿过度依赖，使用 listenersConfig 定义 hide、disable 更合适\n                // values={values}             // 存在 values，则为受控模式\n                // onChange={onChange}     // 非受控模式下不建议使用\n                // hiddenFormItems={['gender']}       // 隐藏表单字段集合，例如：['gender']\n                // disabledFormItems={['begin_work_time']}       // 禁用表单字段集合，例如：['gender']\n            />\n            <p>{JSON.stringify(values)}</p>\n            <button onClick={() => {\n                formRef.resetFields();\n                formRef.setFieldsValue({realname: 123, birthday: '2020年 1 月 1 日'});\n            }}>\n                赋值\n            </button>\n            <button onClick={() => {\n                if (Object.values(values).length > 0) {\n                    console.log(values);\n                } else {\n                    formRef.validateFields((errors, values) => {\n                        if (!errors) {\n                            alert('校验通过，提交了');\n                        }\n                    });\n                }\n            }}>提交</button>\n            <button onClick={() => {\n                setValues(formRef.getFieldsValue());\n                setEditStatus(!editStatus);\n            }}\n            >编辑保存</button>\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n    const [values, setValues] = useState({});\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n            />\n            <p>{JSON.stringify(values)}</p>\n            <button onClick={() => {\n                formRef.resetFields();\n                formRef.setFieldsValue({realname: 123, birthday: '2020年 1 月 1 日'});\n            }}>\n                赋值\n            </button>\n            <button onClick={() => {\n                formRef.validateFields((errors, values) => {\n                    if (!errors) {\n                        // todo: 此处的 useState 导致重渲染，导致所有数据丢失\n                        setValues(values);\n                        alert('校验通过，提交了');\n                    }\n                });\n            }}>提交</button>\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n    const [values, setValues] = useState({});\n\n    function onChange(fieldsDataItem, value) {\n        console.log(fieldsDataItem, value);\n        setValues({...values, [fieldsDataItem.properties.bizFieldName]: value});\n        console.log(values);\n    }\n\n    return (\n        <div className=\"App\">\n            <p>模拟场景：</p>\n            <p>1. 填写姓名隐藏性别</p>\n            <p>2. 填写姓名并自动填写公司邮箱</p>\n            <p>3. 填写证件号码禁用生日，自动填写</p>\n            <p>4. 提交显示表单数据</p>\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                values={values}             // 存在 values，则为受控模式\n                onChange={onChange}     // 非受控模式下不建议使用\n            />\n            <p>{JSON.stringify(values)}</p>\n            <button onClick={() => {\n                console.log(values);\n                alert('受控模式没有验证，可以自己在 onChange 监控，使用 extra 自定义错误显示')\n            }}>提交</button>\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n    const [values, setValues] = useState({});\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                bindFieldNames={'id'}    // 表单绑定的 唯一id/字段名， 例子：bindFieldNames={'properties.bizFieldName'} 就是取每项的 item.properties.bizFieldName\n                fieldsData={data}   // 接口表单数据\n            />\n            <p>{JSON.stringify(values)}</p>\n            <button onClick={() => {\n                formRef.validateFields((errors, values) => {\n                    if (!errors) {\n                        // todo: 此处的 useState 导致重渲染，导致所有数据丢失\n                        setValues(values);\n                        alert('校验通过，提交了');\n                    }\n                });\n            }}>提交</button>\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n    const [columns, setColumns] = useState(2);\n\n    return (\n        <div className=\"App\">\n            <p>输入列数：<input type=\"text\" onChange={(e) => setColumns(Number(e.target.value) || 2)}/></p>\n            <p>指定 columns 为任意列即可</p>\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                columns={columns}     // 列数\n            />\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                style={{width: 1200, backgroundColor: 'pink', padding: 15}}\n            />\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                formItemStyle={{padding: 20}}\n            />\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                formItemLayout={{\n                    labelCol: {\n                        xs: {span: 3},\n                    },\n                    wrapperCol: {\n                        xs: {span: 21},\n                    }\n                }}\n            />\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n    const [values, setValues] = useState({});\n    const [editStatus, setEditStatus] = useState(true);\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n\n                editStatus={editStatus}   // 默认编辑状态，true\n\n                values={editStatus ? null : values}             // 存在 values，则为受控模式\n            />\n            <p style={{color: 'red'}}>1. 需要在 mapApiToText 组件中定义取值和显示方式</p>\n            <p style={{color: 'red'}}>2. editStatus 为 false，需配合 values 使用</p>\n            <p>{JSON.stringify(values)}</p>\n            <button onClick={() => {\n                formRef && setValues(formRef.getFieldsValue());\n                setEditStatus(!editStatus);\n            }}\n            >编辑保存</button>\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <p>模拟场景：</p>\n            <p>1. 填写姓名隐藏性别</p>\n            <p>2. 填写姓名并自动填写公司邮箱</p>\n            <p>3. 填写姓名禁用证件号、生日</p>\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                listenersConfig={[  // onchange 事件可自动处理，其余自定义事件将被传至表单组件，请自行处理\n                    {handleEvent: 'onchange', handleParams: ['realname', 'id_no'], handleCallback: (realname, id_no) => {\n                            fetch('http://localhost:3000/').then(data => console.log(data));\n                            formRef.setFieldsValue({office_email: realname ? `${realname}@qq.com` : ''});\n                    }},\n                    {handleEvent: 'onblur', handleParams: ['realname', 'id_no'], handleCallback: () => {\n                            /* 异步等... */\n                    }},\n                    // hide、disable 需要返回字段列表\n                    {handleEvent: 'onchange', handleType: 'hide', handleParams: ['realname', 'id_no'], handleCallback: (realname = '', id_no) => {\n                            /* 需要返回自定义的隐藏列表... */\n                            if (realname) {\n                                return ['gender'];\n                            }\n                    }},\n                    {handleEvent: 'onchange', handleType: 'disable', handleParams: ['realname', 'id_no'], handleCallback: (realname = '', id_no) => {\n                            /* 需要返回自定义的禁用列表... */\n                            if (realname) {\n                                return ['id_no', 'birthday'];\n                            }\n                    }},\n                ]}\n            />\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <p>模拟场景：</p>\n            <p>1. 姓名长度 10 以内</p>\n            <p>2. 邮箱必须是邮箱格式</p>\n            <p>3. 电话必须是数字</p>\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                selfRulesConfig={[      // 自定义验证规则\n                    {\n                        fieldName: 'office_email',\n                        type: 'email',\n                        message: '必须是邮箱！',\n                    },\n                    // {\n                    //     fieldName: 'office_email',\n                    //     validator: this.handleEMailValidator,\n                    // },\n                    {\n                        fieldName: 'realname',\n                        max: 10,\n                        message: '太长啦！',\n                    },\n                    {\n                        fieldName: 'telephone',\n                        type: 'number',\n                        message: '必须是数字！',\n                    },\n                ]}\n            />\n            <button onClick={() => {\n                formRef.validateFields((errors, values) => {\n                    if (!errors) {\n                        alert('校验通过，提交了');\n                    }\n                });\n            }}>提交</button>\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                extra={{\n                    realname: <div style={{color: 'purple'}}>你好</div>,\n                    begin_work_time: <div style={{color: 'green'}}>不好</div>,\n                    gender: <div style={{color: 'purple'}}>你很好</div>,\n                    id_no: <div style={{color: 'green'}}>我不好</div>,\n                }}\n            />\n        </div>\n    );\n}","import React, {useState} from 'react';\nimport '../App.css';\nimport 'antd/dist/antd.css';\n\nimport data from '../data.json';\n// import data from './data2.json';\n// import data from './data3.json';\n// import data from './data4.json';\n\nimport Forms from '../component/Forms';\n\nexport default function() {\n    let formRef = {};\n\n    return (\n        <div className=\"App\">\n            <p>模拟场景：</p>\n            <p>1. 自定义配置隐藏性别</p>\n            <p>2. 自定义配置禁用首次参加工作时间</p>\n            <Forms\n                getForm={form => formRef = form}    // 非受控模式，用于表单校验、取值\n                fieldsData={data}   // 接口表单数据\n                hiddenFormItems={['gender']}       // 隐藏表单字段集合，例如：['gender']\n                disabledFormItems={['begin_work_time']}       // 禁用表单字段集合，例如：['gender']\n            />\n        </div>\n    );\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport {Collapse} from 'antd';\n\nimport A1 from './examples/a1';\nimport A2 from './examples/a2';\nimport A3 from './examples/a3';\nimport A4 from './examples/a4';\nimport A5 from './examples/a5';\nimport A6 from './examples/a6';\nimport A7 from './examples/a7';\nimport A8 from './examples/a8';\nimport A9 from './examples/a9';\nimport B1 from './examples/b1';\nimport B2 from './examples/b2';\nimport B3 from './examples/b3';\nimport B4 from './examples/b4';\n\nfunction App() {\n    return (\n        <Collapse defaultActiveKey=\"a2\">\n            <Collapse.Panel header=\"开发使用\" key=\"a1\"><A1/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：简单非受控组件\" key=\"a2\"><A2/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：简单受控组件\" key=\"a3\"><A3/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：指定绑定的 fieldName\" key=\"a4\"><A4/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：指定列数\" key=\"a5\"><A5/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：表单整体样式\" key=\"a6\"><A6/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：表单项样式\" key=\"a7\"><A7/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：表单的 label 占比\" key=\"a8\"><A8/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：编辑/非编辑 状态\" key=\"a9\"><A9/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：自定义关联事件\" key=\"b1\"><B1/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：自定义验证规则\" key=\"b2\"><B2/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：自定义显示信息\" key=\"b3\"><B3/></Collapse.Panel>\n            <Collapse.Panel header=\"示例：自定义隐藏、自定义禁用\" key=\"b4\"><B4/></Collapse.Panel>\n        </Collapse>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}